/*
 * generated by Xtext 2.18.0
 */
package org.xtext.example.mydsl1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl1.myDsl.LayerSegment
import org.xtext.example.mydsl1.myDsl.EntityName
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject
import org.xtext.example.mydsl1.myDsl.GeneralEntity
import org.xtext.example.mydsl1.myDsl.Property
import java.util.ArrayList
import org.xtext.example.mydsl1.myDsl.Module
import org.apache.log4j.chainsaw.Main
import org.xtext.example.mydsl1.myDsl.SpecialEntity
import org.xtext.example.mydsl1.myDsl.Json
import org.xtext.example.mydsl1.myDsl.Visualizer
import java.lang.invoke.MethodHandles.Lookup
import org.xtext.example.mydsl1.myDsl.ServiceFront

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		for (layerS : resource.allContents.toIterable.filter(LayerSegment)) {
			 
			if (layerS.fullyQualifiedName.toString().equals("Back.Ejb.Facade")) {
				
				for (en : resource.allContents.toIterable.filter(EntityName)) {
					fsa.generateFile(layerS.fullyQualifiedName.toString("/") + "/" + en.name + "Facade.java",
						en.compile)
				}
			}

			if (layerS.fullyQualifiedName.toString().equals("Back.Ejb.Dto")) {
				for (en : resource.allContents.toIterable.filter(EntityName)) {
					fsa.generateFile(layerS.fullyQualifiedName.toString("/") + "/" + en.name + "Dto.java",
						en.compileDto)
				}
			}

			if (layerS.fullyQualifiedName.toString().equals("Back.War.RestEntity")) {
				for (en : resource.allContents.toIterable.filter(EntityName)) {
					fsa.generateFile(layerS.fullyQualifiedName.toString("/") + "/" + en.name + "Rest.java",
						en.compileRest)
				}
			}

			if (layerS.fullyQualifiedName.toString().equals("Back.Ejb.Pojo")) {
				for (en : resource.allContents.toIterable.filter(GeneralEntity)) {
					fsa.generateFile(layerS.fullyQualifiedName.toString("/") + "/" + en.name.name + ".java",
						en.compilePojo)
				}
			}
			
			if(layerS.fullyQualifiedName.toString().equals("Front.JavaScript.Ui")){
				
				/*
				for(actionComponent: resource.allContents.toIterable.filter(EntityName)){
					fsa.generateFile("Store/Actions/" + actionComponent.name + "Actions.js",
						actionComponent.compileActionComponent
					);
				}
				
				for(reducerComponent: resource.allContents.toIterable.filter(EntityName)){
					fsa.generateFile("Store/Reducers/" + reducerComponent.name + "Reducer.js", 
						reducerComponent.compileReducers
					);
				}
				
				for(serviceComponent: resource.allContents.toIterable.filter(EntityName)){
					fsa.generateFile("Services/"+ serviceComponent.name+"Services.js",
						serviceComponent.compileService
					);
				}
				
				for(containerComponent: resource.allContents.toIterable.filter(EntityName)){
					fsa.generateFile("Containers/"+ containerComponent.name + "Container.js",
						containerComponent.compileContainer
					);
				}*/
			}

		}
		
		var reactDir = "casino-front/";
		var reactSrcDirectory = reactDir+"src/";
		var entities = new ArrayList<EntityName>();
		
		var jsonFile = resource.allContents.filter(Json).toIterable().get(0);
		fsa.generateFile(reactDir+jsonFile.name+".json", jsonFile.compileJsonFile);		
		
		for(e : resource.allContents.toIterable.filter(EntityName))
			entities.add(e);
				
		fsa.generateFile(reactSrcDirectory + "/Store/Constants.js", compileConstants(entities));
		
		var visualizerComponents = resource.allContents.toIterable.filter(Visualizer);
		var customVisualizer = visualizerComponents.get(1);
		
		for(v : visualizerComponents){
			System.out.println("Vis component" + v.fullyQualifiedName);
			if(v.fullyQualifiedName.equals("componentCustomVisualizer")){
				customVisualizer = v;	
			}
		}
		
		for(m: customVisualizer.methods){
			System.out.println("Method" + m.name);
			for(arg: m.arguments){
				System.out.println("Argument" + arg.name);
			}
		}
		
		for(uiComp: resource.allContents.toIterable.filter(EntityName)){
			fsa.generateFile(reactSrcDirectory + "UI/"+ uiComp.name + "/" + uiComp.name +".js",
				compileUiComponent(uiComp, customVisualizer) );
			fsa.generateFile(reactSrcDirectory + "Store/Actions/" + uiComp.name + "Actions.js",
				uiComp.compileActionComponent
			);
			fsa.generateFile(reactSrcDirectory + "Store/Reducers/" + uiComp.name + "Reducer.js", 
				uiComp.compileReducers
			);		
			fsa.generateFile(reactSrcDirectory + "Services/"+ uiComp.name+"Services.js",
				uiComp.compileService
			);
			fsa.generateFile(reactSrcDirectory + "Containers/"+ uiComp.name + "Container.js",
				uiComp.compileContainer
			);		
		}
		
	}
  	
	def compileProperty(Property p)'''
	«IF p.type.name ==='Num'»
		Integer «p.name»;
	«ELSE»
		«p.type.name» «p.name»;
	«ENDIF»
	''' 
	
	def compilePojo(GeneralEntity e) ''' 
		
		package mdd.casino.jpa.entity.pojo;
		
		public class «e.name.name»{
	
			«FOR p:e.properties»
				«p.compileProperty» 
			«ENDFOR»
	
			
		}
		
	'''

	def compileDto(EntityName e) ''' 
		
		package mdd.casino.jpa.entity.dto;
		
		public class «e.name»Dto {
			
		}
		
	'''
	
	def compileRest(EntityName e) ''' 
		
		package mdd.casino.rest.entity;
		
		public class «e.name»Res  extends AbstractRest<«e.name»> {
			    @Context
			    private UriInfo context;
			    
			    «e.name»Facade facade = BeanUtil.lookupFacadeBean(«e.name»Facade.class);
			    
			       public  «e.name»Rest() {
			            super( «e.name».class);
			        }
			    
			        @Override
			        public  «e.name»Facade getFacade() {
			            return facade;
			        }
		}
		
	'''
	def compile(EntityName e) ''' 
		
		package mdd.casino.jpa.entity.facade;
		
		import javax.ejb.Stateless;
		import javax.persistence.EntityManager;
		import javax.persistence.EntityManagerFactory;
		import javax.persistence.PersistenceUnit;
		import mdd.casino.jpa.entity.pojo.«e.name»;
		
		@Stateless
		public class «e.name»Facade extends AbtractFacade{
		
		
			    @PersistenceUnit
			    private EntityManagerFactory emf;
		
			    @Override
			    protected EntityManager getEntityManager() {
			        return emf.createEntityManager();
			    }
		
			    public «e.name»Facade() {
			        super(«e.name».class);
			    }
			    
		
		}	
	 '''
	
	def compileUiComponent(EntityName e, Visualizer v)'''
 	import react, {Component} from 'react'
	 	  	
	class «e.name» extends Component{
		«FOR method: v.methods»
		
		«var i = 0»
		«var args = ""»
		
		«while( i < method.arguments.length){
			if(i < method.arguments.length()){
				args += method.arguments.get(i).name
			}
			else{
				args += method.arguments.get(i).name + ","
			}
			i = i+1
		}»
		
		«method.name»( «args» ){
			
		}
		«ENDFOR»
	}
	
	return default «e.name»
	 '''
	 
    def compileActionComponent(EntityName e)'''
	 import {«e.name»ReducerConstants as C} from ''
	 
	 const set«e.name»s = («e.name»s) => {
	 	return {
	 		type: SET_C.«e.name»S_LIST,
	 		«e.name»s
	 	}
	 }
	 
	 export const fetch«e.name»s = () => {
	 	return dispatch => {
	 		«e.name»Services.get«e.name»List()
	 		.then(response => {
	 			dispach( set«e.name»s(response.data));
	 		})
	 		.catch(err => {
	 			
	 		})
	 	}
	 }
	 
	 export const create«e.name» = («e.name.toLowerCase()»Info) => {
	 	return dispatch
	 }
	  	
	'''
	 
	def compileReducers(EntityName e) '''
		import {«e.name»ReducerConstants as C} from ''
		
		const initialState = {
	  		«e.name.toLowerCase()»s: [],
	  	};
		
		export default function «e.name»Reducer(state = initialState, action){
			switch(action.type){
				case C.SET_«e.name.toUpperCase()»_LIST:
				return {
				...state,
  					«e.name.toLowerCase()»s: action.«e.name.toLowerCase»s
				}
				default:
					return state;
  			}
	  	}

	 '''
	 
 	def compileService(EntityName e)'''
 	 import request from './RequestWrapper';
 	 
 	 function create«e.name»(«e.name»Info){
 	 	
 	 }
 	 
 	 function get«e.name»List(){
 	 	
 	 }
 	 export default{
 	 	
 	 };
 	''' 
 	
 	def compileContainer(EntityName e)'''
	 import {} from ''
	 
	 const mapStateToProps = (state) => {
	 	return {
	 		
	 	};
	 }
	 
	 const mapDispatchToProps = (dispatch) => {
	 	return{
	 		
	 	};
	 } 	
	 
	 export default connect(mapStateToProps, mapDispatchToProps)();
 	'''
 	
 	def compileConstants(ArrayList<EntityName> entities)'''
 		«FOR e:entities»
 			export const «e.name»ReducerConstants={
 				
 			};
 		«ENDFOR»
		
 	'''
 	
 	def compileJsonFile(Json file)'''
	{
		"name": "casino-front",
		"version": "0.1.0",
		"private": true,
		"dependencies": {},
		"scripts": {},
		"eslintConfig": {},
		"browserslist": {}
	}
	'''
	}
	
