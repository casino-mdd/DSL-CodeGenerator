/**
 * generated by Xtext 2.18.0
 */
package org.xtext.example.mydsl1.generator;

import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl1.myDsl.EntityName;
import org.xtext.example.mydsl1.myDsl.GeneralEntity;
import org.xtext.example.mydsl1.myDsl.LayerSegment;
import org.xtext.example.mydsl1.myDsl.Property;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<LayerSegment> _filter = Iterables.<LayerSegment>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), LayerSegment.class);
    for (final LayerSegment layerS : _filter) {
      {
        boolean _equals = this._iQualifiedNameProvider.getFullyQualifiedName(layerS).toString().equals("Back.Ejb.Facade");
        if (_equals) {
          Iterable<EntityName> _filter_1 = Iterables.<EntityName>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EntityName.class);
          for (final EntityName en : _filter_1) {
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(layerS).toString("/");
            String _plus = (_string + "/");
            String _name = en.getName();
            String _plus_1 = (_plus + _name);
            String _plus_2 = (_plus_1 + "Facade.java");
            fsa.generateFile(_plus_2, 
              this.compile(en));
          }
        }
        boolean _equals_1 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS).toString().equals("Back.Ejb.Dto");
        if (_equals_1) {
          Iterable<EntityName> _filter_2 = Iterables.<EntityName>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EntityName.class);
          for (final EntityName en_1 : _filter_2) {
            String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS).toString("/");
            String _plus_3 = (_string_1 + "/");
            String _name_1 = en_1.getName();
            String _plus_4 = (_plus_3 + _name_1);
            String _plus_5 = (_plus_4 + "Dto.java");
            fsa.generateFile(_plus_5, 
              this.compileDto(en_1));
          }
        }
        boolean _equals_2 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS).toString().equals("Back.War.RestEntity");
        if (_equals_2) {
          Iterable<EntityName> _filter_3 = Iterables.<EntityName>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EntityName.class);
          for (final EntityName en_2 : _filter_3) {
            String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS).toString("/");
            String _plus_6 = (_string_2 + "/");
            String _name_2 = en_2.getName();
            String _plus_7 = (_plus_6 + _name_2);
            String _plus_8 = (_plus_7 + "Rest.java");
            fsa.generateFile(_plus_8, 
              this.compileRest(en_2));
          }
        }
        boolean _equals_3 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS).toString().equals("Back.Ejb.Pojo");
        if (_equals_3) {
          Iterable<GeneralEntity> _filter_4 = Iterables.<GeneralEntity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), GeneralEntity.class);
          for (final GeneralEntity en_3 : _filter_4) {
            String _string_3 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS).toString("/");
            String _plus_9 = (_string_3 + "/");
            String _name_3 = en_3.getName().getName();
            String _plus_10 = (_plus_9 + _name_3);
            String _plus_11 = (_plus_10 + ".java");
            fsa.generateFile(_plus_11, 
              this.compilePojo(en_3));
          }
        }
      }
    }
  }
  
  public CharSequence compileProperty(final Property p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = p.getType().getName();
      boolean _tripleEquals = (_name == "Num");
      if (_tripleEquals) {
        _builder.append("Integer ");
        _builder.newLine();
      } else {
        String _name_1 = p.getType().getName();
        _builder.append(_name_1);
        _builder.append(" ");
        String _name_2 = p.getName();
        _builder.append(_name_2);
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePojo(final GeneralEntity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package mdd.casino.jpa.entity.pojo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName().getName();
    _builder.append(_name);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Property> _properties = e.getProperties();
      for(final Property p : _properties) {
        _builder.append("\t");
        CharSequence _compileProperty = this.compileProperty(p);
        _builder.append(_compileProperty, "\t");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileDto(final EntityName e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package mdd.casino.jpa.entity.dto;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("Dto {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileRest(final EntityName e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package mdd.casino.rest.entity;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("Res  extends AbstractRest<");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("> {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("@Context");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("private UriInfo context;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    String _name_2 = e.getName();
    _builder.append(_name_2, "\t    ");
    _builder.append("Facade facade = BeanUtil.lookupFacadeBean(");
    String _name_3 = e.getName();
    _builder.append(_name_3, "\t    ");
    _builder.append("Facade.class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("public  ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t       ");
    _builder.append("Rest() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t            ");
    _builder.append("super( ");
    String _name_5 = e.getName();
    _builder.append(_name_5, "\t            ");
    _builder.append(".class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("public  ");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t        ");
    _builder.append("Facade getFacade() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t            ");
    _builder.append("return facade;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EntityName e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package mdd.casino.jpa.entity.facade;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.ejb.Stateless;");
    _builder.newLine();
    _builder.append("import javax.persistence.EntityManager;");
    _builder.newLine();
    _builder.append("import javax.persistence.EntityManagerFactory;");
    _builder.newLine();
    _builder.append("import javax.persistence.PersistenceUnit;");
    _builder.newLine();
    _builder.append("import mdd.casino.jpa.entity.pojo.");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@Stateless");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("Facade extends AbtractFacade{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("@PersistenceUnit");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("private EntityManagerFactory emf;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("protected EntityManager getEntityManager() {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return emf.createEntityManager();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public ");
    String _name_2 = e.getName();
    _builder.append(_name_2, "\t    ");
    _builder.append("Facade() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    _builder.append("super(");
    String _name_3 = e.getName();
    _builder.append(_name_3, "\t        ");
    _builder.append(".class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder;
  }
}
